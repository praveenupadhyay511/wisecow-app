name: Deploy to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: 311141542338.dkr.ecr.eu-west-1.amazonaws.com
  ECR_REPOSITORY: wisecow-app
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cache Trivy binary
      id: cache
      uses: actions/cache@v3
      with:
        path: trivy
        key: trivy-cache-${{ runner.os }}

    - name: Install Trivy if not cached
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
        mkdir -p trivy && mv ./bin/trivy trivy/ 
        
    - name: Build Docker Image
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

    - name: Trivy Scan Docker Image
      run: |
        trivy/trivy image --timeout 5m --format json \
          -o trivy-report.json $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Upload Trivy Report to S3
      run: |
        aws s3 cp trivy-report.json s3://$S3_BUCKET/trivy-report-${IMAGE_TAG}.json
        
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Tag Docker Image for ECR
      run: |
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Push Docker Image to ECR
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Register New Task Definition
      id: register-task
      run: |
          sed 's|<IMAGE_TAG>|${{ env.IMAGE_TAG }}|g' ecs-task-def.json > new-task-def.json
          TASK_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task_arn=$TASK_ARN" >> $GITHUB_OUTPUT

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
         task-definition: new-task-def.json
         cluster: wisecow-app-cluster
         service: wisecow-task-service-62xtzbzd
         wait-for-service-stability: true

